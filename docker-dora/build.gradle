import org.apache.tools.ant.filters.FixCrLfFilter

def targetDockerHubRepository = rootProject.name
def dockerImageName = targetDockerHubOrganization + '/' + targetDockerHubRepository // like 'cwds/elasticsearch_xpack_data'
def releaseDocker = System.getProperty("ReleaseDocker")
def buildNumber = System.getProperty('BuildNumber')
def dockerTag = (releaseDocker == 'true' && buildNumber != null  ? projectMajorVersion + '_' + buildNumber + '-RC' : projectVersion )

def doraDistFileName = "dora-${projectVersion}-dist.jar" // as shadowJar makes it
def dockerContextDir = "$project.parent.buildDir/$project.name"

task dockerCleanUpLatest(type: Exec, dependsOn: project.parent.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rmi', '--force', "$dockerImageName:latest"
    }
}

task dockerCleanUpTagged(type: Exec, dependsOn: project.parent.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rmi', '--force', "$dockerImageName:$dockerTag"
    }
}

task dockerCleanUp (dependsOn: [dockerCleanUpLatest, dockerCleanUpTagged]) {}

task dockerCopyScripts(type: Copy) {
    from projectDir
    into dockerContextDir
    include 'entrypoint.sh'
    filter(FixCrLfFilter.class, eol:FixCrLfFilter.CrLf.newInstance("lf"))
}

task dockerCopyConfig(type: Copy) {
    from "$project.parent.projectDir/config"
    into "$dockerContextDir/config"
    include 'filters/**'
    include 'dora*.yml'
    include 'shiro*.ini'
    include '*.jceks'
}

task dockerCopyDist(type: Copy, dependsOn: ':dora-api:shadowJar') {
    from "$project.parent.projectDir/dora-api/build/libs"
    into "$dockerContextDir/libs"
    include doraDistFileName
}

task dockerfile(type: Copy) {
    from file("$projectDir/Dockerfile-dora.template")
    into dockerContextDir
    rename { file -> 'Dockerfile-dora' }
    expand(
        dora_dist_file_name: doraDistFileName
    )
}

task dockerCreateImage(type: Exec, dependsOn: [project.parent.checkDockerService, dockerCleanUp, dockerCopyScripts, dockerCopyConfig, dockerCopyDist, dockerfile]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'build', '-t', dockerImageName, '-f', "$dockerContextDir/Dockerfile-dora", dockerContextDir
    }
    dockerCleanUp.mustRunAfter(project.parent.checkDockerService)
}

task dockerTagImage(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'tag', dockerImageName, "$dockerImageName:$dockerTag"
    }
}

task dockerPushTaggedVersion(type: Exec, dependsOn: [project.parent.checkDockerService, dockerTagImage]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:$dockerTag"
    }
    dockerTagImage.mustRunAfter(project.parent.checkDockerService)
}

task dockerPushLatestVersion(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:latest"
    }
}

task dockerDoraPublish(dependsOn: [dockerCreateImage, dockerPushTaggedVersion, dockerPushLatestVersion]) {
    doLast {
        println "\nDora $projectVersion is published"
    }
    dockerPushTaggedVersion.mustRunAfter(dockerCreateImage)
    dockerPushLatestVersion.mustRunAfter(dockerCreateImage)
}
