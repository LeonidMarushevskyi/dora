import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper
import groovy.text.SimpleTemplateEngine

import java.nio.file.Files
import java.nio.file.Paths

project.ext {
    elasticHost = project.buildEnv == 'WIN_DEV' ? project.devDockerHost : (System.env.ELASTIC_HOST ?: '192.168.99.100')
    elasticPort = System.env.ELASTIC_PORT ?: '9200'
    elasticUser = System.env.XPACK_USER ?: 'elastic'
    elasticPassword = System.env.XPACK_PASSWORD ?: 'changeme'
    elasticBaseUrl = "http://${project.elasticHost}:${project.elasticPort}"

    xpackPoliciesFile = "${buildDir}/xpack_policies.json"
    templateEngine = new SimpleTemplateEngine()
    xpackRoleTemplate = project.templateEngine.createTemplate(new File("$projectDir/xpack_role_template.json"))
    xpackQueryTemplate = project.templateEngine.createTemplate(new File("$projectDir/xpack_query_template.json"))
    xpackUserTemplate = project.templateEngine.createTemplate(new File("$projectDir/xpack_user_template.json"))
}

def targetDockerHubRepository = 'elasticsearch_xpack_data'
def dockerImageName = targetDockerHubOrganization + '/' + targetDockerHubRepository // like 'cwds/elasticsearch_xpack_data'
def dockerContainerName = targetDockerHubOrganization + '-' + targetDockerHubRepository + '-' + projectVersion
def dockerTag = projectVersion

def esExecute(String method, String path, String content) {
    URL url = new URL(project.elasticBaseUrl + path)
    HttpURLConnection connection = (HttpURLConnection) url.openConnection()
    connection.setDoInput(true)
    connection.setDoOutput(true)
    connection.setRequestMethod(method)
    String authString = project.elasticUser + ":" + project.elasticPassword
    String authStringEnc = authString.bytes.encodeBase64().toString()
    connection.setRequestProperty("Authorization", "Basic " + authStringEnc);
    connection.setRequestProperty("Content-Type", "application/json")

    if (content != null) {
        OutputStreamWriter writer = new OutputStreamWriter(connection.getOutputStream(), "UTF8")
        writer.write(content);
        writer.close();
    }

    BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), "UTF8"));
    StringBuilder jsonString = new StringBuilder();
    String line
    while ((line = reader.readLine()) != null) {
        jsonString.append(line)
    }
    print jsonString
    int responseCode = connection.getResponseCode()
    connection.disconnect()
    return responseCode
}

void esConnect(baseUrl) {
    int responseCode = 0
    while (true) {
        try {
            responseCode = esExecute("GET", "/_xpack/security/role", null)
        } catch (Exception e) {
            //continue
        }
        if (responseCode == 200) {
            break
        }
        println "\nretrying to connect to " + baseUrl + " ... "
        sleep(7500)
    }
}

task dockerCleanUpLatest(type: Exec, dependsOn: project.parent.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rmi', '--force', "$dockerImageName:latest"
    }
}

task dockerCleanUpTagged(type: Exec, dependsOn: project.parent.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rmi', '--force', "$dockerImageName:$dockerTag"
    }
}

task dockerCleanUp (dependsOn: [dockerCleanUpLatest, dockerCleanUpTagged]) {}

task dockerRemoveContainer(type: Exec, dependsOn: project.parent.checkDockerService) {
    ignoreExitValue true
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'rm', '-v', '--force', dockerContainerName
    }
}

task dockerCreateImage(type: Exec, dependsOn: [project.parent.checkDockerService, dockerRemoveContainer, dockerCleanUp]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'build', '-t', dockerImageName, '-f', "$projectDir/Dockerfile", projectDir
    }
    dockerRemoveContainer.mustRunAfter(project.parent.checkDockerService)
    dockerCleanUp.mustRunAfter(dockerRemoveContainer)
}

task dockerStartContainer(type: Exec, dependsOn: [project.parent.checkDockerService, dockerCreateImage]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'run', '-d', "--name=$dockerContainerName", '-p', "$project.elasticPort:9200", '-e', "http.host=0.0.0.0", '-e', "transport.host=127.0.0.1", dockerImageName
    }
    doLast {
        esConnect(project.elasticBaseUrl)
    }
    dockerCreateImage.mustRunAfter(project.parent.checkDockerService)
}

def readFile(String path) {
    return new String(Files.readAllBytes(Paths.get(path)))
}

/**
 * 
 * @param privileges - [countySensitive, countySealed, stateSensitive, stateSealed, countyId]
 * @return
 */
def xpackRoleJson(privileges) {
    def xpackQuery = project.xpackQueryTemplate.make([
        hasSealed: privileges[1] == 'T' || privileges[3] == 'T',
        county_id: privileges[4]
    ]).toString()

    return new JsonSlurper().parseText(project.xpackRoleTemplate.make([
        role : privileges.join('.'),
        query: JsonOutput.toJson(xpackQuery)
    ]).toString())
}

/**
 *
 * @param privileges - [countySensitive, countySealed, stateSensitive, stateSealed, countyId]
 * @return
 */
def xpackUserJson(privileges) {
    return new JsonSlurper().parseText(project.xpackUserTemplate.make([
            role: privileges.join('.'),
            uuid: UUID.randomUUID()
    ]).toString())
}

def generateXpackPolicies() {
    def xpackPolicyTemplateArray = []
    
    def privilegesLists = new JsonSlurper().parseText(readFile("$projectDir/privileges_lists.json"))
    privilegesLists.county_id.each { countyId ->
        privilegesLists.county_sensitive.each { countySensitive ->
            privilegesLists.county_sealed.each { countySealed ->
                privilegesLists.state_sensitive.each { stateSensitive ->
                    privilegesLists.state_sealed.each { stateSealed ->
                        xpackPolicyTemplateArray.add(xpackRoleJson(
                                [countySensitive, countySealed, stateSensitive, stateSealed, countyId]
                        ))
                        xpackPolicyTemplateArray.add(xpackUserJson(
                                [countySensitive, countySealed, stateSensitive, stateSealed, countyId]
                        ))
                    }
                }
            }
        }
    }

    // write policies to docker-es-xpack/build/xpack_policies.json for manual verification
    File xpackPoliciesFile = new File(project.xpackPoliciesFile)
    xpackPoliciesFile.write(new JsonBuilder(xpackPolicyTemplateArray).toPrettyString())
    
    return xpackPolicyTemplateArray
}

task dockerPopulateXpackPolicies {
    doFirst {
        mkdir project.buildDir
    }
    doLast {
        generateXpackPolicies().each {
            String[] action = it.action.split("\\s")
            String content = it.content == null ? null : JsonOutput.toJson(it.content)
            esExecute(action[0], action[1], content)
        }
    }
}

task dockerPopulateTestPeople {
    enabled = (System.getProperty("es.populate.test.people") ?: 'true').equalsIgnoreCase('true')
    doFirst {
        // create people index
        esExecute("PUT", "/people", "{}")
    }
    doLast {
        // populate test people data
        ["R", "S", "N"].each {
            String esUrl = "/people/person/person_$it"
            String content = readFile("$projectDir/test_data/people/person_${it}.json")
            esExecute("PUT", esUrl, content)
        }
        // verify with URL like: http://192.168.99.100:9200/people/person/_search?pretty
    }
}

task dockerCommitPopulatedImage(type: Exec, dependsOn: [project.parent.checkDockerService, dockerStartContainer, dockerPopulateXpackPolicies, dockerPopulateTestPeople]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'commit', '-m', 'populated', dockerContainerName, dockerImageName
    }
    dockerStartContainer.mustRunAfter(project.parent.checkDockerService)
    dockerPopulateXpackPolicies.mustRunAfter(dockerStartContainer)
    dockerPopulateTestPeople.mustRunAfter(dockerStartContainer)
}

task dockerStopContainer(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'stop', dockerContainerName
    }
}

task dockerTagImage(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'tag', dockerImageName, "$dockerImageName:$dockerTag"
    }
}

task dockerPushTaggedVersion(type: Exec, dependsOn: [project.parent.checkDockerService, dockerTagImage]) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:$dockerTag"
    }
    dockerTagImage.mustRunAfter(project.parent.checkDockerService)
}

task dockerPushLatestVersion(type: Exec, dependsOn: project.parent.checkDockerService) {
    environment << project.dockerEnvVars
    doFirst {
        commandLine 'docker', 'push', "$dockerImageName:latest"
    }
}

task dockerEsXpackPublish(dependsOn: [dockerCommitPopulatedImage, dockerStopContainer, dockerPushTaggedVersion, dockerPushLatestVersion]) {
    doLast {
        println '\nElasricsearch + X-Pack docker image is published'
    }
    dockerStopContainer.mustRunAfter(dockerCommitPopulatedImage)
    dockerPushTaggedVersion.mustRunAfter(dockerStopContainer)
    dockerPushLatestVersion.mustRunAfter(dockerStopContainer)
}
